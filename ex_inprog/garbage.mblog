observable type Garbage;

generating Timestep Time_Garbage(Garbage);

#Garbage(Time_Garbage = t) {
    if t == null then
      = 0
    else if t == @0 then
      = 3
    else = 0
};


random Boolean isRecyclable(Garbage s) ~ Bernoulli(0.5);

random Boolean isShiny(Garbage s, Timestep t) {
  if (isRecyclable(s)) then ~ Bernoulli(0)
  else ~ Bernoulli(1)
};

random Boolean observable(isShiny(Garbage s, Timestep t)) = inspect(s, Prev(t));

random Boolean end_state(Timestep t) {
  if (t == @0) then
    = false
  else if (t == @4) then
    = true
//  else if (exists Timestep pastT pastT < t & exists Garbage s true == putRecycle(s, Prev(t)) & Time_Garbage(s) == pastT) then
//    = true
  else
    = end_state(Prev(t))
};

random Integer reward(Timestep t) {
    if (end_state(t)) then
      = 0
    else if (exists Timestep pastT pastT <= t & exists Garbage s true == inspect(s, t) & Time_Garbage(s) == pastT) then
      = -1
    else if (exists Timestep pastT pastT <= t & exists Garbage s true == putRecycle(s, t) & Time_Garbage(s) == pastT & isRecyclable(s)) then
      = 200
    else if (exists Timestep pastT pastT <= t & exists Garbage s true == putRecycle(s, t) & Time_Garbage(s) == pastT & !isRecyclable(s)) then
      = -200 
    else if (exists Timestep pastT pastT <= t & exists Garbage s true == putTrash(s, t) & Time_Garbage(s) == pastT & isRecyclable(s)) then
      = -200
    else if (exists Timestep pastT pastT <= t & exists Garbage s true == putTrash(s, t) & Time_Garbage(s) == pastT & !isRecyclable(s)) then
      = 200 
    else = -20000
};

random Real value(Timestep t) {
    if (t == @0) then 
      = 0
    else 
      = value(Prev(t)) + reward(Prev(t))
};

decision Boolean inspect(Garbage s, Timestep t);
decision Boolean putTrash(Garbage s, Timestep t);
decision Boolean putRecycle(Garbage s, Timestep t);




random Integer Number_Garbage(Timestep t) ~ Cardinality({Garbage s : Time_Garbage(s)==t});
random Boolean observable(Number_Garbage(Timestep t)) = true;
